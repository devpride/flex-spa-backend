security:
    encoders:
        App\Entity\User: bcrypt
    providers:
        database_users:
            entity: { class: App\Entity\User, property: username }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_login:
            host: ^api.
            pattern:  ^/token
            stateless: true
            anonymous: true
            form_login:
                check_path: /token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        api_public:
            host: ^api.
            pattern:  ^/v1/users
            stateless: true
            anonymous: true

        api:
            host: ^api.
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        admin:
            host: ^admin.
            stateless: false
            anonymous: true
            http_basic: ~

        main:
            anonymous: true

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { host: ^admin., roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
